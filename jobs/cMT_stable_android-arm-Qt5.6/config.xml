<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.security.AuthorizationMatrixProperty>
      <permission>hudson.model.Item.Read:authenticated</permission>
      <permission>hudson.model.Item.ExtendedRead:authenticated</permission>
      <permission>hudson.model.Item.Discover:authenticated</permission>
      <permission>hudson.model.Item.Build:authenticated</permission>
      <permission>hudson.model.Item.Cancel:authenticated</permission>
      <permission>hudson.model.Item.Workspace:authenticated</permission>
      <permission>hudson.model.Item.Delete:authenticated</permission>
      <permission>hudson.model.Item.Configure:authenticated</permission>
      <permission>hudson.model.Run.Update:authenticated</permission>
    </hudson.security.AuthorizationMatrixProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>MATRIX_AXIS_PLATFORM</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>android-arm</string>
              <string>Ubuntu</string>
              <string>cMT3000</string>
              <string>cMT-SVR</string>
              <string>cMT-iv5</string>
              <string>cMT-iv5-3000</string>
              <string>android-x86</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TRIGGER_PARAM_JOB_GROUP</name>
          <description></description>
          <defaultValue>stable-Qt5.6</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TRIGGER_PARAM_BASE_JOB_GROUP</name>
          <description></description>
          <defaultValue>stable</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TRIGGER_PARAM_LIBWEINTEK_BRANCH</name>
          <description></description>
          <defaultValue>v1-stable</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TRIGGER_PARAM_DSERVER_BRANCH</name>
          <description></description>
          <defaultValue>v1-stable</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TRIGGER_PARAM_GUI_BRANCH</name>
          <description></description>
          <defaultValue>v1-bc56</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TRIGGER_PARAM_VIEWER_BRANCH</name>
          <description></description>
          <defaultValue>v1-bc56</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>TRIGGER_PARAM_LIBWEINTEK_BUILD_POLICY</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>incremental</string>
              <string>clean</string>
              <string>brandnew</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>TRIGGER_PARAM_DSERVER_BUILD_POLICY</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>incremental</string>
              <string>clean</string>
              <string>brandnew</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>TRIGGER_PARAM_GUI_BUILD_POLICY</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>incremental</string>
              <string>clean</string>
              <string>brandnew</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>TRIGGER_PARAM_VIEWER_BUILD_POLICY</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>incremental</string>
              <string>clean</string>
              <string>brandnew</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>TRIGGER_PARAM_STATIC_ANALYSIS</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>90</daysToKeep>
        <numToKeep>300</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <scm class="org.jenkinsci.plugins.multiplescms.MultiSCM" plugin="multiple-scms@0.5">
    <scms>
      <hudson.plugins.git.GitSCM plugin="git@2.4.2">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>gitolite@192.168.1.220:libweintek.git</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/${TRIGGER_PARAM_LIBWEINTEK_BRANCH}</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="list"/>
        <extensions>
          <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
            <relativeTargetDir>libweintek</relativeTargetDir>
          </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        </extensions>
      </hudson.plugins.git.GitSCM>
      <hudson.plugins.git.GitSCM plugin="git@2.4.2">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>gitolite@192.168.1.220:d-server.git</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/${TRIGGER_PARAM_DSERVER_BRANCH}</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="list"/>
        <extensions>
          <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
            <relativeTargetDir>dserver</relativeTargetDir>
          </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        </extensions>
      </hudson.plugins.git.GitSCM>
      <hudson.plugins.git.GitSCM plugin="git@2.4.2">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>gitolite@192.168.1.220:gui.qt4.graphicsview.git</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/${TRIGGER_PARAM_GUI_BRANCH}</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="list"/>
        <extensions>
          <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
            <relativeTargetDir>gui</relativeTargetDir>
          </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        </extensions>
      </hudson.plugins.git.GitSCM>
      <hudson.plugins.git.GitSCM plugin="git@2.4.2">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>gitolite@192.168.1.220:QmlCloudHmi.git</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/${TRIGGER_PARAM_VIEWER_BRANCH}</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="list"/>
        <extensions>
          <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
            <relativeTargetDir>viewer</relativeTargetDir>
          </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        </extensions>
      </hudson.plugins.git.GitSCM>
    </scms>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H H(0-7) * * *</spec>
    </hudson.triggers.TimerTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H/5 * * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command># Setup environment for builds

cd /home/ci/work/${MATRIX_AXIS_PLATFORM}
if [ ! -d &quot;build-${TRIGGER_PARAM_JOB_GROUP}-branch&quot; ]; then
    cp -r build-${TRIGGER_PARAM_BASE_JOB_GROUP}-branch build-${TRIGGER_PARAM_JOB_GROUP}-branch
fi

</command>
    </hudson.tasks.Shell>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.BooleanCondition" plugin="run-condition@1.0">
        <token>${TRIGGER_PARAM_STATIC_ANALYSIS}</token>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command># Do static analysis by cppcheck
echo &quot;================================ cppcheck ================================ cppcheck ================================ cppcheck ================================&quot;

rm -rf cppcheck
mkdir cppcheck
cd cppcheck

cppcheck --enable=all --inconclusive --xml --xml-version=2 \
         --suppress=syntaxError \
         --suppress=unusedFunction \
         --suppress=unusedPrivateFunction \
         ${WORKSPACE}/libweintek/weintek \
         ${WORKSPACE}/dserver/dserver \
         ${WORKSPACE}/gui/got \
         ${WORKSPACE}/viewer/CloudHmi \
         2&gt; cppcheck-result.xml
</command>
        </hudson.tasks.Shell>
        <org.jenkinsci.plugins.cppcheck.CppcheckPublisher plugin="cppcheck@1.21">
          <cppcheckConfig>
            <pattern>cppcheck/cppcheck-result.xml</pattern>
            <ignoreBlankFiles>false</ignoreBlankFiles>
            <allowNoReport>false</allowNoReport>
            <configSeverityEvaluation>
              <threshold></threshold>
              <newThreshold></newThreshold>
              <failureThreshold>262</failureThreshold>
              <newFailureThreshold>1</newFailureThreshold>
              <healthy></healthy>
              <unHealthy></unHealthy>
              <severityError>true</severityError>
              <severityWarning>true</severityWarning>
              <severityStyle>true</severityStyle>
              <severityPerformance>true</severityPerformance>
              <severityInformation>true</severityInformation>
              <severityNoCategory>true</severityNoCategory>
              <severityPortability>true</severityPortability>
            </configSeverityEvaluation>
            <configGraph>
              <xSize>500</xSize>
              <ySize>200</ySize>
              <numBuildsInGraph>0</numBuildsInGraph>
              <displayAllErrors>true</displayAllErrors>
              <displayErrorSeverity>true</displayErrorSeverity>
              <displayWarningSeverity>true</displayWarningSeverity>
              <displayStyleSeverity>true</displayStyleSeverity>
              <displayPerformanceSeverity>true</displayPerformanceSeverity>
              <displayInformationSeverity>true</displayInformationSeverity>
              <displayNoCategorySeverity>true</displayNoCategorySeverity>
              <displayPortabilitySeverity>true</displayPortabilitySeverity>
            </configGraph>
          </cppcheckConfig>
        </org.jenkinsci.plugins.cppcheck.CppcheckPublisher>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

# Build libweintek
echo &quot;================================ libweintek ================================ libweintek ================================ libweintek ================================&quot;

# alter trigger parameter

if [[ ! &quot;`date +&quot;%H%M&quot;`&quot; &lt; &quot;0000&quot; &amp;&amp; ! &quot;`date +&quot;%H%M&quot;`&quot; &gt; &quot;0800&quot; ]]; then
	export TRIGGER_PARAM_LIBWEINTEK_BUILD_POLICY=brandnew
fi

# export variables

export LIBWEINTEK_PATH=${WORKSPACE}/libweintek
export INSTALL_PREFIX=/home/ci/work/${MATRIX_AXIS_PLATFORM}/build-${TRIGGER_PARAM_JOB_GROUP}-branch

case $MATRIX_AXIS_PLATFORM in
    &quot;cMT3000&quot;)       export CROSS_COMPILER_TOOLCHAIN=/home/ci/work/cMT3000/target/environment-setup-armv7ahf-vfp-neon-weintek-linux-gnueabi  ;;
    &quot;cMT-iv5&quot;)       export CROSS_COMPILER_TOOLCHAIN=/home/ci/work/cMT-iv5/target/environment-setup-armv7ahf-vfp-neon-weintek-linux-gnueabi  ;;
    &quot;cMT-iv5-3000&quot;)  export CROSS_COMPILER_TOOLCHAIN=/home/ci/work/cMT3000/target/environment-setup-armv7ahf-vfp-neon-weintek-linux-gnueabi  ;;
esac

case $MATRIX_AXIS_PLATFORM in
    &quot;cMT-iv5-3000&quot;)  export PLATFORM_BUILD_FOLDER=cMT3000  ;;
    *)               export PLATFORM_BUILD_FOLDER=${MATRIX_AXIS_PLATFORM}  ;;
esac

if [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-arm&quot; ] || [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-x86&quot; ]; then
	export ANDROID_CMAKE_FILE=/home/ci/android-cmake/android.toolchain.cmake
	export ANDROID_SDK_ROOT=/home/ci/Android/Sdk
	export ANDROID_NDK_ROOT=/home/ci/Android/android-ndk
    
    if [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-arm&quot; ]; then
        export ANDROID_TOOLCHAIN=/home/ci/work/android-arm/target/sysroots/android-toolchain-arm
    elif [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-x86&quot; ]; then
        export ANDROID_TOOLCHAIN=/home/ci/work/android-x86/target/sysroots/android-toolchain-x86
    fi
    
    export CC=${ANDROID_TOOLCHAIN}/bin/arm-linux-androideabi-gcc
    export CXX=${ANDROID_TOOLCHAIN}/bin/arm-linux-androideabi-g++
fi

# clear artifacts

rm -f ${INSTALL_PREFIX}/lib/libweintek_*.a

# prepare out-of-source build

cd ${LIBWEINTEK_PATH}/build
if [ &quot;${TRIGGER_PARAM_LIBWEINTEK_BUILD_POLICY}&quot; = &quot;brandnew&quot; ]; then
    rm -rf jenkins/${MATRIX_AXIS_PLATFORM}
fi
if [ ! -d &quot;jenkins&quot; ]; then
    mkdir -p jenkins
fi
if [ ! -d &quot;jenkins/${MATRIX_AXIS_PLATFORM}&quot; ]; then
    mkdir -p jenkins/${MATRIX_AXIS_PLATFORM}
fi
cd jenkins/${MATRIX_AXIS_PLATFORM}

# generate makefile

${LIBWEINTEK_PATH}/build/${PLATFORM_BUILD_FOLDER}/cmake_libweintek.sh ${LIBWEINTEK_PATH} ${INSTALL_PREFIX} ${CROSS_COMPILER_TOOLCHAIN} RelWithDebInfo

# make

if [ &quot;${TRIGGER_PARAM_LIBWEINTEK_BUILD_POLICY}&quot; = &quot;clean&quot; ]; then
    make clean
fi
make install VERBOSE=1</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

# Build dserver
echo &quot;================================ dserver ================================ dserver ================================ dserver ================================&quot;

# alter trigger parameter

if [[ ! &quot;`date +&quot;%H%M&quot;`&quot; &lt; &quot;0000&quot; &amp;&amp; ! &quot;`date +&quot;%H%M&quot;`&quot; &gt; &quot;0800&quot; ]]; then
	export TRIGGER_PARAM_DSERVER_BUILD_POLICY=brandnew
fi

# export variables

export DSERVER_PATH=${WORKSPACE}/dserver
export LIBWEINTEK_PATH=${WORKSPACE}/libweintek
export MARIADB_CONNECTOR_C_PATH=/home/ci/work/mariadb-connector-c
export INSTALL_PREFIX=/home/ci/work/${MATRIX_AXIS_PLATFORM}/build-${TRIGGER_PARAM_JOB_GROUP}-branch

case $MATRIX_AXIS_PLATFORM in
    &quot;cMT3000&quot;)       export CROSS_COMPILER_TOOLCHAIN=/home/ci/work/cMT3000/target/environment-setup-armv7ahf-vfp-neon-weintek-linux-gnueabi  ;;
    &quot;cMT-iv5&quot;)       export CROSS_COMPILER_TOOLCHAIN=/home/ci/work/cMT-iv5/target/environment-setup-armv7ahf-vfp-neon-weintek-linux-gnueabi  ;;
    &quot;cMT-iv5-3000&quot;)  export CROSS_COMPILER_TOOLCHAIN=/home/ci/work/cMT3000/target/environment-setup-armv7ahf-vfp-neon-weintek-linux-gnueabi  ;;
esac

case $MATRIX_AXIS_PLATFORM in
    &quot;android-arm&quot;)   export BUILD_LIBRARY_ONLY=on   ;;
    &quot;android-x86&quot;)   export BUILD_LIBRARY_ONLY=on   ;;
    *)               export BUILD_LIBRARY_ONLY=off  ;;
esac

case $MATRIX_AXIS_PLATFORM in
    &quot;cMT-iv5-3000&quot;)  export PLATFORM_BUILD_FOLDER=cMT3000  ;;
    *)               export PLATFORM_BUILD_FOLDER=${MATRIX_AXIS_PLATFORM}  ;;
esac

case $MATRIX_AXIS_PLATFORM in
    &quot;cMT3000&quot;)       export ENCRYPT_EXTENSION_NAME=.c30  ;;
    &quot;cMT-SVR&quot;)       export ENCRYPT_EXTENSION_NAME=.cmt  ;;
    &quot;cMT-iv5&quot;)       export ENCRYPT_EXTENSION_NAME=.iv5  ;;
    &quot;cMT-iv5-3000&quot;)  export ENCRYPT_EXTENSION_NAME=.c30  ;;
esac

if [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-arm&quot; ] || [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-x86&quot; ]; then
	export ANDROID_CMAKE_FILE=/home/ci/android-cmake/android.toolchain.cmake
	export ANDROID_SDK_ROOT=/home/ci/Android/Sdk
	export ANDROID_NDK_ROOT=/home/ci/Android/android-ndk
    
    if [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-arm&quot; ]; then
        export ANDROID_TOOLCHAIN=/home/ci/work/android-arm/target/sysroots/android-toolchain-arm
    elif [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-x86&quot; ]; then
        export ANDROID_TOOLCHAIN=/home/ci/work/android-x86/target/sysroots/android-toolchain-x86
    fi
    
    export CC=${ANDROID_TOOLCHAIN}/bin/arm-linux-androideabi-gcc
    export CXX=${ANDROID_TOOLCHAIN}/bin/arm-linux-androideabi-g++
    #export INSTALL_PREFIX=${TOOLCHAIN}/sysroot/usr
fi

# clear artifacts

rm -f ${INSTALL_PREFIX}/bin/dserver*
rm -f ${INSTALL_PREFIX}/lib/libdserver_*.a
rm -rf ${DSERVER_PATH}/artifacts
mkdir ${DSERVER_PATH}/artifacts

# prepare out-of-source build

cd ${DSERVER_PATH}/build
if [ &quot;${TRIGGER_PARAM_DSERVER_BUILD_POLICY}&quot; = &quot;brandnew&quot; ]; then
    rm -rf jenkins/${MATRIX_AXIS_PLATFORM}
fi
if [ ! -d &quot;jenkins&quot; ]; then
    mkdir -p jenkins
fi
if [ ! -d &quot;jenkins/${MATRIX_AXIS_PLATFORM}&quot; ]; then
    mkdir -p jenkins/${MATRIX_AXIS_PLATFORM}
fi
cd jenkins/${MATRIX_AXIS_PLATFORM}

# generate makefile

${DSERVER_PATH}/build/${PLATFORM_BUILD_FOLDER}/cmake_dserver.sh ${DSERVER_PATH} ${LIBWEINTEK_PATH} ${MARIADB_CONNECTOR_C_PATH} ${GOOGLE_BREAKPAD_PATH} ${INSTALL_PREFIX} ${CROSS_COMPILER_TOOLCHAIN} RelWithDebInfo

# make

if [ &quot;${TRIGGER_PARAM_DSERVER_BUILD_POLICY}&quot; = &quot;clean&quot; ]; then
    make clean
fi
make install VERBOSE=1

if [ &quot;${BUILD_LIBRARY_ONLY}&quot; = &quot;off&quot; ]; then
    cp ${INSTALL_PREFIX}/bin/dserver ${DSERVER_PATH}/artifacts/dserver.RelWithDebInfo
else
    cp ${INSTALL_PREFIX}/lib/libdserver_core.a ${DSERVER_PATH}/artifacts
    cp ${INSTALL_PREFIX}/lib/libdserver_client.a ${DSERVER_PATH}/artifacts
fi

# strip and encrypt

if [ &quot;${BUILD_LIBRARY_ONLY}&quot; = &quot;off&quot; ]; then
    make install/strip VERBOSE=1
    cp ${INSTALL_PREFIX}/bin/dserver ${DSERVER_PATH}/artifacts/dserver.decrypted
 
    if test -n &quot;${ENCRYPT_EXTENSION_NAME}&quot;; then
        /home/ci/work/crypto e ${INSTALL_PREFIX}/bin/dserver ${INSTALL_PREFIX}/bin/dserver${ENCRYPT_EXTENSION_NAME}
        cp ${INSTALL_PREFIX}/bin/dserver${ENCRYPT_EXTENSION_NAME} ${DSERVER_PATH}/artifacts
    fi
fi    
</command>
    </hudson.tasks.Shell>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <condition class="org.jenkins_ci.plugins.run_condition.core.AlwaysRun" plugin="run-condition@1.0"/>
      <buildStep class="hudson.tasks.ArtifactArchiver">
        <artifacts>dserver/artifacts/*</artifacts>
        <allowEmptyArchive>false</allowEmptyArchive>
        <onlyIfSuccessful>false</onlyIfSuccessful>
        <fingerprint>false</fingerprint>
        <defaultExcludes>true</defaultExcludes>
        <caseSensitive>true</caseSensitive>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.logic.Not" plugin="run-condition@1.0">
        <condition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition">
          <arg1>${MATRIX_AXIS_PLATFORM}</arg1>
          <arg2>cMT-SVR</arg2>
          <ignoreCase>false</ignoreCase>
        </condition>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>#!/bin/bash

# Build gui
echo &quot;================================ gui ================================ gui ================================ gui ================================&quot;

# alter trigger parameter

if [[ ! &quot;`date +&quot;%H%M&quot;`&quot; &lt; &quot;0000&quot; &amp;&amp; ! &quot;`date +&quot;%H%M&quot;`&quot; &gt; &quot;0800&quot; ]]; then
	export TRIGGER_PARAM_GUI_BUILD_POLICY=brandnew
fi

# export variables

export GUI_PATH=${WORKSPACE}/gui
export LIBWEINTEK_PATH=${WORKSPACE}/libweintek
export DSERVER_PATH=${WORKSPACE}/dserver
export INSTALL_PREFIX=/home/ci/work/${MATRIX_AXIS_PLATFORM}/build-${TRIGGER_PARAM_JOB_GROUP}-branch

case $MATRIX_AXIS_PLATFORM in
    &quot;cMT3000&quot;)       export CROSS_COMPILER_TOOLCHAIN=/home/ci/work/cMT3000/target/environment-setup-armv7ahf-vfp-neon-weintek-linux-gnueabi  ;;
    &quot;cMT-iv5&quot;)       export CROSS_COMPILER_TOOLCHAIN=/home/ci/work/cMT-iv5/target/environment-setup-armv7ahf-vfp-neon-weintek-linux-gnueabi  ;;
    &quot;cMT-iv5-3000&quot;)  export CROSS_COMPILER_TOOLCHAIN=/home/ci/work/cMT3000/target/environment-setup-armv7ahf-vfp-neon-weintek-linux-gnueabi  ;;
esac

case $MATRIX_AXIS_PLATFORM in
    &quot;cMT3000&quot;)       export BUILD_LIBRARY_ONLY=off ;;
    &quot;Ubuntu&quot;)        export BUILD_LIBRARY_ONLY=off ;;
    *)               export BUILD_LIBRARY_ONLY=on  ;;
esac

case $MATRIX_AXIS_PLATFORM in
    &quot;cMT-iv5-3000&quot;)  export PLATFORM_BUILD_FOLDER=cMT-iv5  ;;
    *)               export PLATFORM_BUILD_FOLDER=${MATRIX_AXIS_PLATFORM}  ;;
esac

if [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;cMT3000&quot; ]; then
   export ENCRYPT_EXTENSION_NAME=.c30
fi

case $MATRIX_AXIS_PLATFORM in
    &quot;android-arm&quot;)   export PATH=/opt/Qt5.6.0/5.6/android_armv7/bin:${PATH}  ;;
    &quot;android-x86&quot;)   export PATH=/opt/Qt5.6.0/5.6/android_x86/bin:${PATH}    ;;
    &quot;Ubuntu&quot;)        export PATH=/opt/Qt5.4.2/5.4/gcc_64/bin:${PATH}         ;;
esac

if [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-arm&quot; ] || [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-x86&quot; ]; then
	export ANDROID_NDK_ROOT=/home/ci/Android/android-ndk
    
    if [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-arm&quot; ]; then
        export ANDROID_TOOLCHAIN=/home/ci/work/android-arm/target/sysroots/android-toolchain-arm
    elif [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-x86&quot; ]; then
        export ANDROID_TOOLCHAIN=/home/ci/work/android-x86/target/sysroots/android-toolchain-x86
    fi
fi

# clear artifacts

rm -f ${INSTALL_PREFIX}/bin/gui*
rm -f ${INSTALL_PREFIX}/lib/liblibgui20.a
rm -f ${INSTALL_PREFIX}/lib/libgot_*.a
rm -rf ${GUI_PATH}/artifacts
mkdir ${GUI_PATH}/artifacts

# prepare out-of-source build

cd ${GUI_PATH}/build
if [ &quot;${TRIGGER_PARAM_GUI_BUILD_POLICY}&quot; = &quot;brandnew&quot; ]; then
    rm -rf jenkins/${MATRIX_AXIS_PLATFORM}
fi
if [ ! -d &quot;jenkins&quot; ]; then
    mkdir -p jenkins
fi
if [ ! -d &quot;jenkins/${MATRIX_AXIS_PLATFORM}&quot; ]; then
    mkdir -p jenkins/${MATRIX_AXIS_PLATFORM}
fi
cd jenkins/${MATRIX_AXIS_PLATFORM}

# generate makefile

cp ${GUI_PATH}/build/${PLATFORM_BUILD_FOLDER}/features.pri .
${GUI_PATH}/build/${PLATFORM_BUILD_FOLDER}/qmake_gui.sh ${GUI_PATH} ${LIBWEINTEK_PATH} ${DSERVER_PATH} ${INSTALL_PREFIX} ${CROSS_COMPILER_TOOLCHAIN} RelWithDebInfo

# make

if test -n &quot;${CROSS_COMPILER_TOOLCHAIN}&quot;; then
    source ${CROSS_COMPILER_TOOLCHAIN}
fi

if [ &quot;${TRIGGER_PARAM_GUI_BUILD_POLICY}&quot; = &quot;clean&quot; ]; then
    make clean
fi
make VERBOSE=1

if [ &quot;${BUILD_LIBRARY_ONLY}&quot; = &quot;off&quot; ]; then
    cp ${INSTALL_PREFIX}/bin/gui ${GUI_PATH}/artifacts/gui.RelWithDebInfo
else
    cp ${INSTALL_PREFIX}/lib/liblibgui20.a ${GUI_PATH}/artifacts
fi

# strip and encrypt

if [ &quot;${BUILD_LIBRARY_ONLY}&quot; = &quot;off&quot; ] &amp;&amp; [ -e &quot;${INSTALL_PREFIX}/bin/gui&quot; ]; then
    strip ${INSTALL_PREFIX}/bin/gui
    cp ${INSTALL_PREFIX}/bin/gui ${GUI_PATH}/artifacts/gui.decrypted
    
    if test -n &quot;${ENCRYPT_EXTENSION_NAME}&quot;; then
        test_mtcrypt --encrypt ${INSTALL_PREFIX}/bin/gui --out ${INSTALL_PREFIX}/bin/gui${ENCRYPT_EXTENSION_NAME}
        cp ${INSTALL_PREFIX}/bin/gui${ENCRYPT_EXTENSION_NAME} ${GUI_PATH}/artifacts
    fi    
fi
</command>
        </hudson.tasks.Shell>
        <hudson.tasks.ArtifactArchiver>
          <artifacts>gui/artifacts/*</artifacts>
          <allowEmptyArchive>false</allowEmptyArchive>
          <onlyIfSuccessful>false</onlyIfSuccessful>
          <fingerprint>false</fingerprint>
          <defaultExcludes>true</defaultExcludes>
          <caseSensitive>true</caseSensitive>
        </hudson.tasks.ArtifactArchiver>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.logic.And" plugin="run-condition@1.0">
        <conditions>
          <org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
            <condition class="org.jenkins_ci.plugins.run_condition.logic.Not">
              <condition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition">
                <arg1>${MATRIX_AXIS_PLATFORM}</arg1>
                <arg2>cMT3000</arg2>
                <ignoreCase>false</ignoreCase>
              </condition>
            </condition>
          </org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
          <org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
            <condition class="org.jenkins_ci.plugins.run_condition.logic.Not">
              <condition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition">
                <arg1>${MATRIX_AXIS_PLATFORM}</arg1>
                <arg2>cMT-SVR</arg2>
                <ignoreCase>false</ignoreCase>
              </condition>
            </condition>
          </org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
        </conditions>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>#!/bin/bash

# Build viewer
echo &quot;================================ viewer ================================ viewer ================================ viewer ================================&quot;

# alter trigger parameter

if [[ ! &quot;`date +&quot;%H%M&quot;`&quot; &lt; &quot;0000&quot; &amp;&amp; ! &quot;`date +&quot;%H%M&quot;`&quot; &gt; &quot;0800&quot; ]]; then
	export TRIGGER_PARAM_VIEWER_BUILD_POLICY=brandnew
fi

# export variables

export VIEWER_PATH=${WORKSPACE}/viewer
export CLOUDHMI_PATH=${VIEWER_PATH}/CloudHmi
export LIBWEINTEK_PATH=${WORKSPACE}/libweintek
export DSERVER_PATH=${WORKSPACE}/dserver
export GUI_PATH=${WORKSPACE}/gui
export INSTALL_PREFIX=/home/ci/work/${MATRIX_AXIS_PLATFORM}/build-${TRIGGER_PARAM_JOB_GROUP}-branch

case $MATRIX_AXIS_PLATFORM in
    &quot;cMT-iv5&quot;)       export CROSS_COMPILER_TOOLCHAIN=/home/ci/work/cMT-iv5/target/environment-setup-armv7ahf-vfp-neon-weintek-linux-gnueabi  ;;
    &quot;cMT-iv5-3000&quot;)  export CROSS_COMPILER_TOOLCHAIN=/home/ci/work/cMT3000/target/environment-setup-armv7ahf-vfp-neon-weintek-linux-gnueabi  ;;
esac

case $MATRIX_AXIS_PLATFORM in
    &quot;cMT-iv5-3000&quot;)  export PLATFORM_BUILD_FOLDER=cMT-iv5  ;;
    *)               export PLATFORM_BUILD_FOLDER=${MATRIX_AXIS_PLATFORM}  ;;
esac

case $MATRIX_AXIS_PLATFORM in
    &quot;cMT-iv5&quot;)       export ENCRYPT_EXTENSION_NAME=.iv5  ;;
    &quot;cMT-iv5-3000&quot;)  export ENCRYPT_EXTENSION_NAME=.iv5  ;;
esac

case $MATRIX_AXIS_PLATFORM in
    &quot;android-arm&quot;)   export QT_ROOT=/opt/Qt5.6.0/5.6/android_armv7  ;;
    &quot;android-x86&quot;)   export QT_ROOT=/opt/Qt5.6.0/5.6/android_x86    ;;
    &quot;Ubuntu&quot;)        export QT_ROOT=/opt/Qt5.4.2/5.4/gcc_64         ;;
esac

if [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-arm&quot; ] || [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-x86&quot; ]; then
    case $MATRIX_AXIS_PLATFORM in
        &quot;android-arm&quot;)   export ANDROID_PLATFORM=arm  ;;
        &quot;android-x86&quot;)   export ANDROID_PLATFORM=x86  ;;
    esac
    
    case $MATRIX_AXIS_PLATFORM in
        &quot;android-arm&quot;)   export APK_FILE_NAME=QtApp-release-signed.apk  ;;
        &quot;android-x86&quot;)   export APK_FILE_NAME=QtApp-release-signed.apk  ;;
    esac

	export ANDROID_SDK_ROOT=/home/ci/Android/Sdk
	export ANDROID_NDK_ROOT=/home/ci/Android/android-ndk
    export ANDROID_TOOLCHAIN=/home/ci/work/android-${ANDROID_PLATFORM}/target/sysroots/android-toolchain-${ANDROID_PLATFORM}
fi

# clear artifacts

rm -f ${INSTALL_PREFIX}/bin/*CloudHmi*
rm -f ${INSTALL_PREFIX}/bin/*cMTViewer*
rm -f ${INSTALL_PREFIX}/bin/bin/${APK_FILE_NAME}
rm -rf ${VIEWER_PATH}/artifacts
mkdir ${VIEWER_PATH}/artifacts

# prepare out-of-source build

if test -n &quot;${QT_ROOT}&quot;; then
    export PATH=${QT_ROOT}/bin:${PATH}
fi

cd ${VIEWER_PATH}/build
if [ &quot;${TRIGGER_PARAM_VIEWER_BUILD_POLICY}&quot; = &quot;brandnew&quot; ]; then
    rm -rf jenkins/${MATRIX_AXIS_PLATFORM}
fi
if [ ! -d &quot;jenkins&quot; ]; then
    mkdir -p jenkins
fi
if [ ! -d &quot;jenkins/${MATRIX_AXIS_PLATFORM}&quot; ]; then
    mkdir -p jenkins/${MATRIX_AXIS_PLATFORM}
fi
cd jenkins/${MATRIX_AXIS_PLATFORM}

# generate makefile

cp ${VIEWER_PATH}/build/${PLATFORM_BUILD_FOLDER}/*features.pri .
${VIEWER_PATH}/build/${PLATFORM_BUILD_FOLDER}/qmake_viewer.sh ${CLOUDHMI_PATH} ${LIBWEINTEK_PATH} ${DSERVER_PATH} ${GUI_PATH} ${INSTALL_PREFIX} ${CROSS_COMPILER_TOOLCHAIN} RelWithDebInfo

# make

if test -n &quot;${ANDROID_PLATFORM}&quot;; then
    make install INSTALL_ROOT=${INSTALL_PREFIX}/bin
    
    rm -rf ${QT_ROOT}/src/android/java/src/*
    cp -rH ${QT_ROOT}/src/android/java_src_ori/* ${QT_ROOT}/src/android/java/src
    cp -f ${VIEWER_PATH}/android/QtActivity.java ${QT_ROOT}/src/android/java/src/org/qtproject/qt5/android/bindings
    rm -rf ${INSTALL_PREFIX}/bin/src
    
    rm -rf android
    mkdir android
    cp -rf ${VIEWER_PATH}/android/${ANDROID_PLATFORM}/* android
    
    ${QT_ROOT}/bin/androiddeployqt --input ${VIEWER_PATH}/build/jenkins/${MATRIX_AXIS_PLATFORM}/android-libCloudHmi.so-deployment-settings.json \
                                   --output ${INSTALL_PREFIX}/bin \
                                   --sign ${VIEWER_PATH}/android/android_release.keystore weintek \
                                   --storepass 1151511515 \
                                   --keypass asdzxc123
    
    cp ${INSTALL_PREFIX}/bin/bin/${APK_FILE_NAME} ${VIEWER_PATH}/artifacts/cMTViewer-${ANDROID_PLATFORM}.apk	
else
    if test -n &quot;${CROSS_COMPILER_TOOLCHAIN}&quot;; then
        source ${CROSS_COMPILER_TOOLCHAIN}
    fi

    make VERBOSE=1
    cp ${INSTALL_PREFIX}/bin/CloudHmi ${VIEWER_PATH}/artifacts/CloudHmi.RelWithDebInfo	

    # strip and encrypt
    cd ${INSTALL_PREFIX}/bin
    if [ -e &quot;CloudHmi&quot; ]; then
        strip CloudHmi
        tar -cv CloudHmi &gt;&gt; CloudHmi.tar
        if test -n &quot;${ENCRYPT_EXTENSION_NAME}&quot;; then
            test_mtcrypt --encrypt CloudHmi.tar --out cMTViewer${ENCRYPT_EXTENSION_NAME}
            cp cMTViewer${ENCRYPT_EXTENSION_NAME} ${VIEWER_PATH}/artifacts
        else
            cp CloudHmi.tar ${VIEWER_PATH}/artifacts
        fi
    fi
fi</command>
        </hudson.tasks.Shell>
        <hudson.tasks.ArtifactArchiver>
          <artifacts>viewer/artifacts/*</artifacts>
          <allowEmptyArchive>false</allowEmptyArchive>
          <onlyIfSuccessful>false</onlyIfSuccessful>
          <fingerprint>false</fingerprint>
          <defaultExcludes>true</defaultExcludes>
          <caseSensitive>true</caseSensitive>
        </hudson.tasks.ArtifactArchiver>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition" plugin="run-condition@1.0">
        <arg1>${MATRIX_AXIS_PLATFORM}</arg1>
        <arg2>Ubuntu</arg2>
        <ignoreCase>false</ignoreCase>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command># Unit tests
echo &quot;================================ unit-test ================================ unit-test ================================ unit-test ================================&quot;

export INSTALL_PREFIX=/home/ci/work/${MATRIX_AXIS_PLATFORM}/build-${TRIGGER_PARAM_JOB_GROUP}-branch


rm -rf gtest
mkdir gtest
cd gtest

mkdir test-libweintek
mkdir test-dserver
mkdir test-got

cd ${WORKSPACE}/gtest/test-libweintek
${INSTALL_PREFIX}/bin/test-libweintek --gtest_output=xml:${WORKSPACE}/gtest/gtest-libweintek.xml

cd ${WORKSPACE}/gtest/test-dserver
cp ../../dserver/tests/test_project/default_project .
${INSTALL_PREFIX}/bin/test-dserver --gtest_output=xml:${WORKSPACE}/gtest/gtest-dserver.xml

cd ${WORKSPACE}/gtest/test-got
${INSTALL_PREFIX}/bin/test-got --gtest_output=xml:${WORKSPACE}/gtest/gtest-got.xml</command>
        </hudson.tasks.Shell>
        <hudson.tasks.junit.JUnitResultArchiver plugin="junit@1.10">
          <testResults>gtest/*.xml</testResults>
          <keepLongStdio>false</keepLongStdio>
          <healthScaleFactor>1.0</healthScaleFactor>
          <allowEmptyResults>false</allowEmptyResults>
        </hudson.tasks.junit.JUnitResultArchiver>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
  </builders>
  <publishers>
    <hudson.plugins.claim.ClaimPublisher plugin="claim@2.8"/>
  </publishers>
  <buildWrappers/>
</project>