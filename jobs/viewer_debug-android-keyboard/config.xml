<?xml version='1.0' encoding='UTF-8'?>
<matrix-project plugin="matrix-project@1.6">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.plugins.matrix__configuration__parameter.MatrixCombinationsParameterDefinition plugin="matrix-combinations-parameter@1.0.9">
          <name>PLATFORMS_TO_BUILD</name>
          <description></description>
        </hudson.plugins.matrix__configuration__parameter.MatrixCombinationsParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TRIGGER_PARAM_VIEWER_BRANCH</name>
          <description></description>
          <defaultValue>debug_android_keyboard</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TRIGGER_PARAM_JOB_GROUP</name>
          <description></description>
          <defaultValue>stable</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>TRIGGER_PARAM_VIEWER_BUILD_POLICY</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>incremental</string>
              <string>clean</string>
              <string>brandnew</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>90</daysToKeep>
        <numToKeep>300</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>gitolite@192.168.1.220:QmlCloudHmi.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/${TRIGGER_PARAM_VIEWER_BRANCH}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.AssemblaWeb">
      <url></url>
    </browser>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>true</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <axes>
    <hudson.matrix.TextAxis>
      <name>MATRIX_AXIS_PLATFORM</name>
      <values>
        <string>android-arm</string>
      </values>
    </hudson.matrix.TextAxis>
    <org.jenkinsci.plugins.elasticaxisplugin.ElasticAxis plugin="elastic-axis@1.2">
      <name>MATRIX_AXIS_NODE</name>
      <values>
        <string>master</string>
        <string>windows</string>
      </values>
      <label>linux,windows</label>
      <ignoreOffline>true</ignoreOffline>
    </org.jenkinsci.plugins.elasticaxisplugin.ElasticAxis>
  </axes>
  <combinationFilter>(MATRIX_AXIS_NODE == &quot;windows&quot; &amp;&amp; MATRIX_AXIS_PLATFORM == &quot;win32&quot;) || (MATRIX_AXIS_NODE != &quot;windows&quot; &amp;&amp; MATRIX_AXIS_PLATFORM != &quot;win32&quot;)</combinationFilter>
  <builders>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition" plugin="run-condition@1.0">
        <arg1>${MATRIX_AXIS_NODE}</arg1>
        <arg2>master</arg2>
        <ignoreCase>false</ignoreCase>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>#!/bin/bash

# Build viewer
echo &quot;================================ viewer ================================ viewer ================================ viewer ================================&quot;

# alter trigger parameter

if [[ ! &quot;`date +&quot;%H%M&quot;`&quot; &lt; &quot;0000&quot; &amp;&amp; ! &quot;`date +&quot;%H%M&quot;`&quot; &gt; &quot;0800&quot; ]]; then
	export TRIGGER_PARAM_VIEWER_BUILD_POLICY=brandnew
fi

# export variables

export VIEWER_PATH=${WORKSPACE}
export CLOUDHMI_PATH=${VIEWER_PATH}/CloudHmi
export LIBWEINTEK_PATH=${JENKINS_HOME}/jobs/libweintek_${TRIGGER_PARAM_JOB_GROUP}/workspace
export DSERVER_PATH=${JENKINS_HOME}/jobs/dserver_${TRIGGER_PARAM_JOB_GROUP}/workspace
export GUI_PATH=${JENKINS_HOME}/jobs/gui_${TRIGGER_PARAM_JOB_GROUP}/workspace
export INSTALL_PREFIX=/home/ci/work/${MATRIX_AXIS_PLATFORM}/build-${TRIGGER_PARAM_JOB_GROUP}-branch

case $MATRIX_AXIS_PLATFORM in
    &quot;android-arm&quot;)   export BOOST_PATH=/opt/boost_1_55_0  ;;
    &quot;android-x86&quot;)   export BOOST_PATH=/opt/boost_1_55_0  ;;
esac

case $MATRIX_AXIS_PLATFORM in
    &quot;cMT-iv5&quot;)       export CROSS_COMPILER_TOOLCHAIN=/home/ci/work/cMT-iv5/target/environment-setup-armv7ahf-vfp-neon-weintek-linux-gnueabi  ;;
    &quot;cMT-iv5-3000&quot;)  export CROSS_COMPILER_TOOLCHAIN=/home/ci/work/cMT3000/target/environment-setup-armv7ahf-vfp-neon-weintek-linux-gnueabi  ;;
esac

case $MATRIX_AXIS_PLATFORM in
    &quot;cMT-iv5-3000&quot;)  export PLATFORM_BUILD_FOLDER=cMT-iv5  ;;
    *)               export PLATFORM_BUILD_FOLDER=${MATRIX_AXIS_PLATFORM}  ;;
esac

case $MATRIX_AXIS_PLATFORM in
    &quot;cMT-iv5&quot;)       export ENCRYPT_EXTENSION_NAME=.iv5  ;;
    &quot;cMT-iv5-3000&quot;)  export ENCRYPT_EXTENSION_NAME=.iv5  ;;
esac

case $MATRIX_AXIS_PLATFORM in
    &quot;android-arm&quot;)   export QT_ROOT=/opt/Qt5.5.1/5.5/android_armv7  ;;
    &quot;android-x86&quot;)   export QT_ROOT=/opt/Qt5.5.1/5.5/android_x86    ;;
    &quot;Ubuntu&quot;)        export QT_ROOT=/opt/Qt5.4.2/5.4/gcc_64         ;;
esac

if [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-arm&quot; ] || [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-x86&quot; ]; then
    case $MATRIX_AXIS_PLATFORM in
        &quot;android-arm&quot;)   export ANDROID_PLATFORM=arm  ;;
        &quot;android-x86&quot;)   export ANDROID_PLATFORM=x86  ;;
    esac

	#export ANDROID_CMAKE_FILE=/home/ci/android-cmake/android.toolchain.cmake
	export ANDROID_SDK_ROOT=/home/ci/Android/Sdk
	export ANDROID_NDK_ROOT=/home/ci/Android/android-ndk
    
    if [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-arm&quot; ]; then
        export TOOLCHAIN=/home/ci/work/android-arm/target/sysroots/android-toolchain-arm
    elif [ &quot;${MATRIX_AXIS_PLATFORM}&quot; = &quot;android-x86&quot; ]; then
        export TOOLCHAIN=/home/ci/work/android-x86/target/sysroots/android-toolchain-x86
    fi
    
    #export CC=${TOOLCHAIN}/bin/arm-linux-androideabi-gcc
    #export CXX=${TOOLCHAIN}/bin/arm-linux-androideabi-g++
    export INSTALL_PREFIX=${TOOLCHAIN}/sysroot/usr
fi

# clear artifacts

rm -f ${INSTALL_PREFIX}/bin/CloudHmi*
rm -f ${INSTALL_PREFIX}/bin/cMTViewer*
rm -rf ${VIEWER_PATH}/artifacts
mkdir ${VIEWER_PATH}/artifacts

# prepare out-of-source build

if test -n &quot;${QT_ROOT}&quot;; then
	export PATH=${QT_ROOT}/bin:${PATH}
fi

cd ${VIEWER_PATH}/build
if [ &quot;${TRIGGER_PARAM_VIEWER_BUILD_POLICY}&quot; = &quot;brandnew&quot; ]; then
    rm -rf jenkins/${MATRIX_AXIS_PLATFORM}
fi
if [ ! -d &quot;jenkins&quot; ]; then
    mkdir -p jenkins
fi
if [ ! -d &quot;jenkins/${MATRIX_AXIS_PLATFORM}&quot; ]; then
    mkdir -p jenkins/${MATRIX_AXIS_PLATFORM}
fi
cd jenkins/${MATRIX_AXIS_PLATFORM}

# generate makefile

cp ${VIEWER_PATH}/build/${PLATFORM_BUILD_FOLDER}/*features.pri .
${VIEWER_PATH}/build/${PLATFORM_BUILD_FOLDER}/qmake_viewer.sh ${CLOUDHMI_PATH} ${LIBWEINTEK_PATH} ${DSERVER_PATH} ${GUI_PATH} ${BOOST_PATH} ${INSTALL_PREFIX} ${CROSS_COMPILER_TOOLCHAIN} RelWithDebInfo

# make

if test -n &quot;${CROSS_COMPILER_TOOLCHAIN}&quot;; then
    source ${CROSS_COMPILER_TOOLCHAIN}
fi


if test -n &quot;${ANDROID_PLATFORM}&quot;; then
    make install INSTALL_ROOT=${INSTALL_PREFIX}/bin
    
    rm -rf ${QT_ROOT}/src/android/java/src
    mkdir ${QT_ROOT}/src/android/java/src
    cp -rH ${QT_ROOT}/src/android/java.src.cMTViewer/* ${QT_ROOT}/src/android/java/src
    
    rm -rf ../android
    mkdir ../android
    cp -rf ${VIEWER_PATH}/android/${ANDROID_PLATFORM}/* ../android
    
    ${QT_ROOT}/bin/androiddeployqt --input ${VIEWER_PATH}/build/jenkins/${MATRIX_AXIS_PLATFORM}/android-libCloudHmi.so-deployment-settings.json \
                                   --output ${INSTALL_PREFIX}/bin \
                                   --sign ${VIEWER_PATH}/android/android_release.keystore weintek \
                                   --storepass 1151511515 \
                                   --keypass asdzxc123
                                   
    cp ${INSTALL_PREFIX}/bin/bin/QtApp-release-signed.apk ${VIEWER_PATH}/artifacts/cMTViewer-${ANDROID_PLATFORM}.apk	
else
    make VERBOSE=1
    cp ${INSTALL_PREFIX}/bin/CloudHmi ${VIEWER_PATH}/artifacts/CloudHmi.RelWithDebInfo	

    # strip and encrypt
    cd ${INSTALL_PREFIX}/bin
    if [ -e &quot;CloudHmi&quot; ]; then
        strip CloudHmi
        tar -cv CloudHmi &gt;&gt; CloudHmi.tar
        if test -n &quot;${ENCRYPT_EXTENSION_NAME}&quot;; then
            test_mtcrypt --encrypt CloudHmi.tar --out cMTViewer${ENCRYPT_EXTENSION_NAME}
            cp cMTViewer${ENCRYPT_EXTENSION_NAME} ${VIEWER_PATH}/artifacts
        else
            cp CloudHmi.tar ${VIEWER_PATH}/artifacts
        fi
    fi
fi
</command>
        </hudson.tasks.Shell>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition" plugin="run-condition@1.0">
        <arg1>${MATRIX_AXIS_NODE}</arg1>
        <arg2>windows</arg2>
        <ignoreCase>false</ignoreCase>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.BatchFile>
          <command>:: alter trigger parameter&#xd;
&#xd;
if &quot;%time%&quot; geq &quot; 0:00:00.00&quot; ( if &quot;%time%&quot; lss &quot; 8:00:00.00&quot; (&#xd;
    set TRIGGER_PARAM_VIEWER_BUILD_POLICY=clean&#xd;
))&#xd;
&#xd;
:: set variables&#xd;
&#xd;
set WORKSPACE_DIR=%cd%&#xd;
set WORK_UTIL_DIR=c:\jenkins\work&#xd;
set LIBWEINTEK_DIR=C:\jenkins\workspace\libweintek_%TRIGGER_PARAM_JOB_GROUP%\MATRIX_AXIS_NODE\windows\MATRIX_AXIS_PLATFORM\win32&#xd;
set DSERVER_DIR=C:\jenkins\workspace\dserver_%TRIGGER_PARAM_JOB_GROUP%\MATRIX_AXIS_NODE\windows\MATRIX_AXIS_PLATFORM\win32&#xd;
set GUI_DIR=C:\jenkins\workspace\gui_%TRIGGER_PARAM_JOB_GROUP%\MATRIX_AXIS_NODE\windows\MATRIX_AXIS_PLATFORM\win32&#xd;
&#xd;
:: clear artifacts&#xd;
&#xd;
del %WORKSPACE_DIR%\Win32\Release\cMTViewer.*&#xd;
rmdir /s/q %WORKSPACE_DIR%\artifacts&#xd;
mkdir %WORKSPACE_DIR%\artifacts&#xd;
&#xd;
:: prepare build environment&#xd;
&#xd;
copy /y %LIBWEINTEK_DIR%\build\vs2012\build_win32.bat .&#xd;
copy /y cloudhmi.props.in cloudhmi.props&#xd;
&#xd;
call %WORK_UTIL_DIR%\script\replace_string.bat &quot;cloudhmi.props&quot; &quot;&lt;WEINTEKDIR&gt;..\..\libweintek&lt;/WEINTEKDIR&gt;&quot; &quot;&lt;WEINTEKDIR&gt;%LIBWEINTEK_DIR%&lt;/WEINTEKDIR&gt;&quot;&#xd;
call %WORK_UTIL_DIR%\script\replace_string.bat &quot;cloudhmi.props&quot; &quot;&lt;DSERVERDIR&gt;..\..\d-server&lt;/DSERVERDIR&gt;&quot; &quot;&lt;DSERVERDIR&gt;%DSERVER_DIR%&lt;/DSERVERDIR&gt;&quot;&#xd;
call %WORK_UTIL_DIR%\script\replace_string.bat &quot;cloudhmi.props&quot; &quot;&lt;GOTDIR&gt;..\..\gui&lt;/GOTDIR&gt;&quot; &quot;&lt;GOTDIR&gt;%GUI_DIR%&lt;/GOTDIR&gt;&quot;&#xd;
&#xd;
:: build project &#xd;
&#xd;
call build_win32.bat CloudHmi Release %TRIGGER_PARAM_VIEWER_BUILD_POLICY%&#xd;
copy /y Win32\Release\cMTViewer.exe %WORKSPACE_DIR%\artifacts&#xd;
copy /y Win32\Release\cMTViewer.pdb %WORKSPACE_DIR%\artifacts&#xd;
</command>
        </hudson.tasks.BatchFile>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>artifacts/*</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers/>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
  </executionStrategy>
</matrix-project>